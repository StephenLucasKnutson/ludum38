{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../TileType.ts","../PlayerStats.ts","../Player.ts","../WorldBlock.ts","../World.ts","../Simulator.ts","../UI.ts","../Autowired.ts","../Main.ts"],"names":[],"mappings":"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","sourcesContent":["export class TileType {\n    name: string;\n    color: number;\n    goldPerTurn: number;\n    tendencyToEnter: number;\n    tendencyToLeave: number;\n    chanceToSpawn: number;\n\n    material: THREE.Material;\n\n    public constructor(\n        name: string,\n        color: number,\n        goldPerTurn: number,\n        tendencyToEnter: number,\n        tendencyToLeave: number,\n        chanceToSpawn: number\n    ) {\n        this.name = name;\n        this.color = color;\n        this.goldPerTurn = goldPerTurn;\n        this.tendencyToEnter = tendencyToEnter;\n        this.tendencyToLeave = tendencyToLeave;\n        this.chanceToSpawn = chanceToSpawn;\n\n        this.material = new THREE.MeshBasicMaterial({color: this.color, side: THREE.BackSide});\n    }\n\n    static plains: TileType = new TileType(\"PLAINS\", 0xC0FF6D, 1, 0.5, 0.2, 0);\n    static forest: TileType = new TileType(\"FOREST\", 0x228B22, 2, 0.25, 0.21, 0);\n    static mountains: TileType = new TileType(\"MOUNTAINS\", 0x968D99, 3, 0.1, 0.1, 0);\n    static sea: TileType = new TileType(\"SEA\", 0x006994, 1, 0.01, 0.1, 0);\n    static desert: TileType = new TileType(\"DESERT\", 0xEDC9AF, 0, 0.01, 0.1, 0);\n\n    static gold: TileType = new TileType(\"GOLD\", 0xFFDF00, 10, 0.01, 0.0, 0);\n    static diamond: TileType = new TileType(\"DIAMOND\", 0x9AC5DB, 20, 0.01, 0.0, 0);\n\n    static village: TileType = new TileType(\"VILLAGE\", 0x000000, 10, 0.01, 0.0, 0.01);\n\n    static allTileTypes: TileType[] = [\n        TileType.plains,\n        TileType.forest,\n        TileType.mountains,\n        TileType.sea,\n        TileType.desert,\n        TileType.gold,\n        TileType.diamond,\n        TileType.village\n    ];\n\n    static tileTypeNameToGold()  {\n        let tileTypeToGold: {[key: string]: number;} = {};\n        for( let tileType of TileType.allTileTypes) {\n            tileTypeToGold[tileType.name] = tileType.goldPerTurn;\n        }\n        return tileTypeToGold;\n    }\n\n}","import Vector2 = THREE.Vector2;\r\nimport nextPowerOfTwo = THREE.Math.nextPowerOfTwo;\r\nimport {TileType} from \"./TileType\";\r\n\r\nexport class PlayerStats {\r\n    tileTypeToNumberOwned: {[key: string]: number;} = {};\r\n\r\n    constructor() {\r\n    }\r\n\r\n    incrementTileType(tileType: TileType) {\r\n        let tileTypeName: string = tileType.name;\r\n        if(this.tileTypeToNumberOwned[tileTypeName] == null){\r\n            this.tileTypeToNumberOwned[tileTypeName] = 0;\r\n        }\r\n        this.tileTypeToNumberOwned[tileTypeName] ++;\r\n    }\r\n\r\n    totalGold() {\r\n        let tileTypeToGold: {[key: string]: number;} = TileType.tileTypeNameToGold();\r\n\r\n        let returnValue: number = 0;\r\n        for(let tileTypeName in this.tileTypeToNumberOwned) {\r\n            let numberOwned = this.tileTypeToNumberOwned[tileTypeName];\r\n            let goldPer = tileTypeToGold[tileTypeName];\r\n            returnValue += numberOwned * goldPer;\r\n        }\r\n        return returnValue;\r\n    }\r\n\r\n    totalUnits() {\r\n        let returnValue: number = 0;\r\n        for(let tileTypeName in this.tileTypeToNumberOwned) {\r\n            let numberOwned = this.tileTypeToNumberOwned[tileTypeName];\r\n            returnValue += numberOwned;\r\n        }\r\n        return returnValue;\r\n    }\r\n}\r\n","import Vector2 = THREE.Vector2;\nimport nextPowerOfTwo = THREE.Math.nextPowerOfTwo;\nimport {PlayerStats} from \"./PlayerStats\";\n\nexport class Player {\n    color: number;\n    colorAsString: string;\n    name: string;\n    material: THREE.Material;\n    gold: number = 0;\n\n    attack: number = 0.01;\n    defense: number = 1.0;\n\n    kills: number = 0;\n    deaths: number = 0;\n\n    playerStats: PlayerStats;\n\n    constructor() {\n        if (Player.nextPlayerColorIndex == Player.allPlayerColors.length) {\n            throw new Error('Ran out of colors');\n        }\n        this.color = Player.allPlayerColors[Player.nextPlayerColorIndex];\n        this.colorAsString = Player.allPlayerColorsAsString[Player.nextPlayerColorIndex];\n        this.name = Player.allPlayersName[Player.nextPlayerColorIndex];\n        Player.nextPlayerColorIndex++;\n        this.material = new THREE.MeshBasicMaterial({color: this.color, side: THREE.BackSide});\n    }\n\n    resetStats() {\n        this.playerStats = new PlayerStats()\n    }\n\n    static nextPlayerColorIndex: number = 0;\n    static allPlayerColors = [0xFF0000, 0x0000FF, 0xFFA500, 0x00FF00, 0xD2691E];\n    static allPlayerColorsAsString = ['#FF0000', '#0000FF', '#FFA500', '#00FF00', '#D2691E'];\n    static allPlayersName = ['YOU', 'BLUE', 'ORANGE', 'GREEN', 'BROWN'];\n}\n","import {TileType} from \"./TileType\";\nimport {Player} from \"./Player\";\nimport {World} from \"./World\";\nimport Vector2 = THREE.Vector2;\n\nexport class WorldBlock {\n    tileType: TileType;\n    tileMesh: THREE.Mesh;\n    backgroundMesh: THREE.Mesh;\n    owningPlayer: Player;\n    isSelected: boolean;\n\n    constructor() {\n\n    }\n\n    setOwningPlayer(newOwningPlayer: Player) {\n        this.owningPlayer = newOwningPlayer;\n        if (newOwningPlayer) {\n            this.backgroundMesh.material = newOwningPlayer.material;\n        } else {\n            this.backgroundMesh.material = World.backgroundMaterial;\n        }\n\n    }\n\n    setTileType(newTileType: TileType) {\n        this.tileType = newTileType;\n        this.tileMesh.material = newTileType.material;\n    }\n\n    setSelected(isSelected: boolean) {\n        if (isSelected == this.isSelected) {\n            return;\n        }\n        this.isSelected = isSelected;\n        if (isSelected) {\n            this.backgroundMesh.material = World.backgroundSelectedMaterial;\n        } else {\n            this.setOwningPlayer(this.owningPlayer)\n        }\n\n    }\n}\n","import {TileType} from \"./TileType\";\nimport {WorldBlock} from \"./WorldBlock\";\nimport {Autowired} from \"./Autowired\";\nimport {Player} from \"./Player\";\nimport Vector2 = THREE.Vector2;\nimport ThrottleSettings = _.ThrottleSettings;\n\nexport class World {\n    autowired: Autowired;\n    map: {[key: number]: {[key: number]: WorldBlock;};} = {};\n    selectedWorldBlock: WorldBlock;\n    static backgroundMaterial: THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial({\n        color: 0x000000,\n        side: THREE.BackSide\n    });\n    static backgroundSelectedMaterial: THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial({\n        color: 0xFFFFFF,\n        side: THREE.BackSide\n    });\n\n    constructor(autowired: Autowired) {\n        this.autowired = autowired;\n\n        this.generatePlane();\n        this.generate(500, 7, 2, 0.5, 50, 0.25, 1.0, TileType.forest, [TileType.plains]);\n        this.generate(700, 3, 2, 1.0, 150, 0.25, 1.0, TileType.sea, [TileType.plains]);\n        this.generate(500, 3, 2, 0.0, 250, 0.0, 0.3, TileType.desert, [TileType.plains]);\n        this.generate(500, 4, 4, 0.0, 100, 0.0, 0.3, TileType.mountains, [TileType.forest]);\n\n        this.generate(500, 1, 1, 0.0, 40, 0.0, 0.0, TileType.gold, [TileType.plains, TileType.forest]);\n        this.generate(500, 1, 1, 0.0, 80, 0.0, 0.0, TileType.diamond, [TileType.plains, TileType.forest]);\n\n        let geometry = new THREE.PlaneGeometry(7, 7);\n        let backgroundGeometry = new THREE.PlaneGeometry(10, 10);\n\n\n        for (let i = 0; i < this.autowired.WIDTH; i++) {\n            for (let j = 0; j < this.autowired.HEIGHT; j++) {\n                let tileType = this.map[i][j].tileType;\n\n                let plane = new THREE.Mesh(geometry, tileType.material);\n                plane.rotateX(Math.PI);\n                plane.position.set(i * 10, j * 10, 0);\n                this.autowired.scene.add(plane);\n                this.map[i][j].tileMesh = plane;\n\n                let backgroundPlane = new THREE.Mesh(backgroundGeometry, World.backgroundMaterial);\n                backgroundPlane.rotateX(Math.PI);\n                backgroundPlane.position.set(i * 10, j * 10, -1);\n                this.autowired.scene.add(backgroundPlane);\n                this.map[i][j].backgroundMesh = backgroundPlane;\n            }\n        }\n\n        let $this = this;\n        $(this.autowired.canvasElement).click((event) => {\n            let vector = new THREE.Vector3 (\n                ( event.clientX / $this.autowired.canvasElement.innerWidth() ) * 2 - 1,\n                -( event.clientY / $this.autowired.canvasElement.innerHeight() ) * 2 + 1,\n                0.5);\n\n            vector.unproject($this.autowired.camera);\n            let mapPosition : THREE.Vector2 = new THREE.Vector2(Math.round(vector.x / 10), Math.round(vector.y / 10));\n            if(this.isWithinBounds(mapPosition)){\n                for (let i = 0; i < this.autowired.WIDTH; i++) {\n                    for (let j = 0; j < this.autowired.HEIGHT; j++) {\n                        this.map[i][j].setSelected(false);\n                    }\n                }\n                let selectedWorldBlock = this.getMap(mapPosition);\n                this.selectedWorldBlock = selectedWorldBlock;\n                selectedWorldBlock.setSelected(true);\n\n            }\n            //console.log(pos);\n        })\n    }\n\n    isWithinBounds(position: Vector2) :boolean {\n        return position.x >= 0 && position.x < this.autowired.WIDTH && position.y >= 0 && position.y < this.autowired.HEIGHT;\n    };\n\n    setMap = (xUnrounded: number, yUnrounded: number, t: TileType, canApplyTo: TileType[]) => {\n        let x: number = Math.round(xUnrounded);\n        let y: number = Math.round(yUnrounded);\n        if (this.isWithinBounds(new Vector2(x, y))) {\n            let existingType: TileType = this.map[x][y].tileType;\n            let canBeApplied: boolean = _.contains(canApplyTo, existingType);\n            if (canBeApplied) {\n                this.map[x][y].tileType = t;\n            }\n        }\n    };\n    getMap (position: THREE.Vector2) {\n        return this.map[position.x][position.y]\n    }\n\n    generatePlane = () => {\n        for (let i = 0; i < this.autowired.WIDTH; i++) {\n            this.map[i] = {};\n            for (let j = 0; j < this.autowired.HEIGHT; j++) {\n                this.map[i][j] = new WorldBlock();\n                this.map[i][j].tileType = TileType.plains;\n            }\n        }\n    };\n\n    randomSpot(): THREE.Vector2 {\n        return new THREE.Vector2(Math.round(Math.random() * this.autowired.WIDTH), Math.round(Math.random() * this.autowired.HEIGHT));\n    };\n\n    randomSpotAlongEdge(): THREE.Vector2 {\n        if (Math.random() < 0.5) {\n            let xEdge = Math.round(Math.random()) * this.autowired.WIDTH;\n            return new THREE.Vector2(xEdge, Math.round(Math.random() * this.autowired.HEIGHT));\n        } else {\n            let yEdge = Math.round(Math.random()) * this.autowired.HEIGHT;\n            return new THREE.Vector2(Math.round(Math.random() * this.autowired.WIDTH), yEdge);\n        }\n    };\n\n    randomDirection(scalar: number): THREE.Vector2 {\n        return new THREE.Vector2(Math.random() * 2 - 1, Math.random() * 2 - 1).multiplyScalar(scalar);\n    };\n\n    generate = (numberOfIterations: number,\n                radiusMax: number,\n                radiusMin: number,\n                directionScalar: number,\n                shuffleIterations: number,\n                edgeTendancy: number,\n                movementScalar: number,\n                t: TileType,\n                canApplyTo: TileType[]) => {\n\n        let position: THREE.Vector2 = this.randomSpotAlongEdge();\n        let radius: number;\n        let direction: THREE.Vector2 = this.randomDirection(directionScalar);\n\n        for (let zzz: number = 0; zzz < numberOfIterations; zzz++) {\n            if (zzz % shuffleIterations == 0) {\n                direction = this.randomDirection(directionScalar);\n                let diff = radiusMax - radiusMin;\n                radius = Math.random() * diff + radiusMin;\n                if (Math.random() < (1 - edgeTendancy)) {\n                    position = this.randomSpot();\n                } else {\n                    position = this.randomSpotAlongEdge();\n                }\n            }\n            position.x += (Math.random() * 5 - 2.5 + direction.x) * movementScalar;\n            position.y += (Math.random() * 5 - 2.5 + direction.y) * movementScalar;\n            if (position.y < 0 || position.y >= this.autowired.HEIGHT || position.x < 0 || position.x >= this.autowired.WIDTH) {\n                if (Math.random() < (1 - edgeTendancy)) {\n                    position = this.randomSpot();\n                } else {\n                    position = this.randomSpotAlongEdge();\n                }\n            }\n\n            for (let i: number = 0; i < radius * 2; i++) {\n                for (let j: number = 0; j < radius * 2; j++) {\n                    let iCentered = i - radius;\n                    let jCentered = j - radius;\n                    let point: Vector2 = new Vector2(iCentered + position.x, jCentered + position.y);\n                    if (new Vector2(iCentered, jCentered).length() < radius) {\n                        this.setMap(point.x, point.y, t, canApplyTo);\n                    }\n                }\n            }\n        }\n    };\n}\n","import Vector2 = THREE.Vector2;\nimport nextPowerOfTwo = THREE.Math.nextPowerOfTwo;\nimport {Autowired} from \"./Autowired\";\nimport {Player} from \"./Player\";\nimport {WorldBlock} from \"./WorldBlock\";\nimport {TileType} from \"./TileType\";\n\nexport class Simulator {\n    autowired: Autowired;\n\n    players: Player[] = [];\n    playerCharacter: Player;\n\n    constructor(autowired: Autowired) {\n        this.autowired = autowired;\n\n        for (let i: number = 0; i < 4; i++) {\n            let newPlayer: Player = new Player();\n            this.players.push(newPlayer);\n\n            let startingPosition: THREE.Vector2 = this.autowired.world.randomSpot();\n            let startingWorldBlock: WorldBlock = this.autowired.world.map[startingPosition.x][startingPosition.y];\n            startingWorldBlock.setOwningPlayer(newPlayer);\n            startingWorldBlock.setTileType(TileType.village)\n        }\n        this.playerCharacter = this.players[0];\n\n    }\n\n    neighborOffsets: THREE.Vector2[] = [new Vector2(1, 0), new Vector2(-1, 0), new Vector2(0, 1), new Vector2(0, -1)];\n\n    withNeighborOffsets(point: THREE.Vector2): THREE.Vector2[] {\n        let returnValue: THREE.Vector2[] = [];\n        for (let neighborOffset of this.neighborOffsets) {\n            let neighborPoint = point.clone().add(neighborOffset);\n            if (this.autowired.world.isWithinBounds(new Vector2(neighborPoint.x, neighborPoint.y))) {\n                returnValue.push(neighborPoint)\n            }\n        }\n        return _.shuffle(returnValue) as THREE.Vector2[];\n    }\n\n    openNeighborBlocks(point: THREE.Vector2): WorldBlock[] {\n        let neighborPoints: Vector2[] = this.withNeighborOffsets(point);\n        let returnValue: WorldBlock[] = [];\n        for (let neighbor of neighborPoints) {\n            let neighborBlock = this.autowired.world.map[neighbor.x][neighbor.y];\n            let neighborTileIsEmpty = !neighborBlock.owningPlayer;\n            if (neighborTileIsEmpty) {\n                returnValue.push(neighborBlock);\n            }\n        }\n        return returnValue;\n    }\n\n    enemyNeighborBlocks(point: THREE.Vector2): WorldBlock[] {\n        let neighborPoints: Vector2[] = this.withNeighborOffsets(point);\n        let block: WorldBlock = this.autowired.world.map[point.x][point.y];\n        let returnValue: WorldBlock[] = [];\n        for (let neighbor of neighborPoints) {\n            let neighborBlock: WorldBlock = this.autowired.world.map[neighbor.x][neighbor.y];\n            let isEnemyTile: boolean = neighborBlock.owningPlayer != null && neighborBlock.owningPlayer != block.owningPlayer\n            if (isEnemyTile) {\n                returnValue.push(neighborBlock);\n            }\n        }\n        return returnValue;\n    }\n\n    update(): void {\n        for (let i: number = 0; i < this.autowired.WIDTH; i++) {\n            for (let j: number = 0; j < this.autowired.HEIGHT; j++) {\n                let point: THREE.Vector2 = new THREE.Vector2(i, j);\n                let worldBlock: WorldBlock = this.autowired.world.map[i][j];\n                let tileType: TileType = worldBlock.tileType;\n                if (worldBlock.owningPlayer) {\n                    for (let neighborBlock of this.openNeighborBlocks(point)) {\n                        let shouldSpawn = tileType.chanceToSpawn > Math.random();\n                        if (shouldSpawn) {\n                            neighborBlock.setOwningPlayer(worldBlock.owningPlayer);\n                        }\n                    }\n                    let enemyNeighbors: WorldBlock[] = this.enemyNeighborBlocks(point);\n                    for (let neighborBlock of enemyNeighbors) {\n                        let shouldKill = worldBlock.owningPlayer.attack / neighborBlock.owningPlayer.defense > Math.random();\n                        if (shouldKill) {\n                            neighborBlock.owningPlayer.deaths ++;\n                            worldBlock.owningPlayer.kills ++;\n                            neighborBlock.setOwningPlayer(null);\n\n                        }\n                    }\n                    let openNeighbors: WorldBlock[] = this.openNeighborBlocks(point);\n                    if (openNeighbors.length > 0) {\n                        let possibleNewPosition = openNeighbors[0];\n                        let probabilityToMove = tileType.tendencyToLeave / possibleNewPosition.tileType.tendencyToEnter;\n                        if (probabilityToMove > Math.random()) {\n                            possibleNewPosition.setOwningPlayer(worldBlock.owningPlayer);\n                            worldBlock.setOwningPlayer(null);\n                        }\n                    }\n\n                }\n            }\n        }\n        for(let player of this.players) {\n            player.resetStats()\n        }\n        for (let i: number = 0; i < this.autowired.WIDTH; i++) {\n            for (let j: number = 0; j < this.autowired.HEIGHT; j++) {\n                let point: THREE.Vector2 = new THREE.Vector2(i, j);\n                let worldBlock: WorldBlock = this.autowired.world.map[i][j];\n                let tileType: TileType = worldBlock.tileType;\n                if (worldBlock.owningPlayer) {\n                    let player : Player = worldBlock.owningPlayer;\n                    player.playerStats.incrementTileType(tileType);\n                }\n            }\n        }\n        for(let player of this.players) {\n            player.gold += player.playerStats.totalGold();\n        }\n    }\n}\n","import {Autowired} from \"./Autowired\";\n//http://stackoverflow.com/questions/15248872/dynamically-create-2d-text-in-three-js\nexport class UI {\n    autowired: Autowired;\n    scoreDiv: HTMLDivElement;\n    worldBlockDIV: HTMLDivElement;\n\n    constructor(autowired: Autowired) {\n        this.autowired = autowired;\n        let element = document.body;\n\n        this.scoreDiv = document.createElement('div');\n        this.scoreDiv.style.position = 'absolute';\n        this.scoreDiv.style.color = this.autowired.simulator.playerCharacter.colorAsString;\n        this.scoreDiv.innerHTML = \"\";\n        this.scoreDiv.style.top = '25px';\n        this.scoreDiv.style.left = '25px';\n        this.scoreDiv.style.fontSize = \"25px\";\n        element.appendChild(this.scoreDiv);\n\n        this.worldBlockDIV = document.createElement('div');\n        this.worldBlockDIV.style.position = 'absolute';\n        this.worldBlockDIV.style.color = this.autowired.simulator.playerCharacter.colorAsString;\n        this.worldBlockDIV.innerHTML = \"\";\n        this.worldBlockDIV.style.top = '50%';\n        this.worldBlockDIV.style.left = '25px';\n        this.worldBlockDIV.style.fontSize = \"25px\";\n        element.appendChild(this.worldBlockDIV);\n\n\n    }\n    nf = new Intl.NumberFormat();\n    public update() {\n        let gold : string = \"TOTAL GOLD: \" + this.nf.format(this.autowired.simulator.playerCharacter.gold);\n        let goldPerTurn : String = \"RATE OF GOLD: \" + this.nf.format(this.autowired.simulator.playerCharacter.playerStats.totalGold());\n        let units: string = \"UNITS ALIVE: \" + this.nf.format(this.autowired.simulator.playerCharacter.playerStats.totalUnits());\n        let kills: string = \"TOTAL KILLS: \" + this.nf.format(this.autowired.simulator.playerCharacter.kills);\n        let deaths: string = \"TOTAL DEATHS: \" + this.nf.format(this.autowired.simulator.playerCharacter.deaths);\n        this.scoreDiv.innerText =  [gold, goldPerTurn, units, kills, deaths].join('\\n');\n\n        let selected = this.autowired.world.selectedWorldBlock;\n        if(selected) {\n            let selectedOwner = selected.owningPlayer;\n            let tileType: string = \"TYPE: \" + selected.tileType.name;\n            let player: string = \"OWNER: \" + ((!!selectedOwner) ? selectedOwner.name : \"NONE\");\n            let rateOfGold: string = \"GOLD GENERATED: \" + selected.tileType.goldPerTurn;\n            this.worldBlockDIV.innerText = [tileType, player, rateOfGold].join('\\n');\n        } else {\n            this.worldBlockDIV.innerText = \"\";\n        }\n\n    }\n}","import {World} from \"./World\";\nimport {Simulator} from \"./Simulator\";\n\nimport ShadowMapType = THREE.ShadowMapType;\nimport PCFSoftShadowMap = THREE.PCFSoftShadowMap;\nimport {UI} from \"./UI\";\n\nexport class Autowired {\n    isGameOver: boolean;\n\n    camera: THREE.Camera;\n    scene: THREE.Scene;\n    renderer: THREE.WebGLRenderer;\n\n    canvasElement: JQuery;\n\n    world : World;\n    simulator: Simulator;\n    ui : UI;\n    WIDTH: number = 120;\n    HEIGHT: number = 80;\n\n    constructor() {\n        this.isGameOver = false;\n        this.canvasElement = $(\"#myCanvas\");\n\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: <HTMLCanvasElement>this.canvasElement.get(0),\n            antialias: true,\n            precision: \"highp\"\n        });\n\n        let width = $(document).innerWidth() - 50;\n        let height = $(document).innerHeight() - 70;\n        let aspectRatio = width / height;\n        this.renderer.setSize(width, height);\n\n        let size: number = 900;\n        this.camera = new THREE.OrthographicCamera( -size, size, size / aspectRatio, -size / aspectRatio, 0, 10 );\n        this.camera.position.set(0, 0, 1);\n        this.camera.lookAt(new THREE.Vector3(0,0,0));\n        this.camera.position.set(400, 400, 5);\n\n        this.scene = new THREE.Scene();\n\n        let light = new THREE.PointLight(0xFFFFFF, 0.5, 10000);\n        light.position.set(0, 0, 0);\n        this.scene.add(light);\n\n        this.scene.add(new THREE.AmbientLight(0x404040));\n\n        this.world = new World(this);\n        this.simulator = new Simulator(this);\n        this.ui = new UI(this);\n    }\n}","/// <reference path=\"definitions/underscore.d.ts\" />\n\nimport {Autowired} from \"./Autowired\";\n\n\nclass Main {\n    autowired: Autowired;\n\n    constructor() {\n        this.autowired = new Autowired();\n    }\n\n    render = () => {\n        requestAnimationFrame(this.render);\n        this.autowired.simulator.update();\n        this.autowired.ui.update();\n\n        this.autowired.renderer.render(this.autowired.scene, this.autowired.camera);\n    };\n}\nlet main: Main = new Main();\nmain.render();"]}