{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../TileType.ts","../Player.ts","../WorldBlock.ts","../World.ts","../Simulator.ts","../Autowired.ts","../Cube.ts","../Room.ts","../Main.ts"],"names":[],"mappings":"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","sourcesContent":["export class TileType {\n    name: string;\n    color: number;\n\n    public constructor(name: string, color: number) {\n        this.name = name;\n        this.color = color;\n    }\n\n    static plains: TileType = new TileType(\"plains\", 0xC0FF6D);\n    static woods: TileType = new TileType(\"woods\", 0x228B22);\n    static mountains: TileType = new TileType(\"mountains\", 0x968D99);\n    static sea: TileType = new TileType(\"sea\", 0x006994);\n    static desert: TileType = new TileType(\"desert\", 0xEDC9AF);\n\n    static gold: TileType = new TileType(\"gold\", 0xFFDF00);\n    static diamond: TileType = new TileType(\"diamond\", 0x9AC5DB);\n\n    static allTileTypes = [TileType.plains, TileType.woods, TileType.mountains, TileType.sea, TileType.desert]\n}","import Vector2 = THREE.Vector2;\nimport nextPowerOfTwo = THREE.Math.nextPowerOfTwo;\n\nexport class Player {\n    color: number;\n    material: THREE.Material;\n\n    constructor() {\n        if(Player.nextPlayerColorIndex == Player.allPlayerColors.length) {\n            throw new Error('Ran out of colors');\n        }\n        this.color = Player.allPlayerColors[Player.nextPlayerColorIndex++];\n        this.material = new THREE.MeshBasicMaterial({color: this.color, side: THREE.BackSide});\n    }\n\n    static nextPlayerColorIndex: number = 0;\n    static allPlayerColors = [ 0xFF0000, 0x0000FF, 0x000000, 0xFFA500, 0x00FF00, 0xD2691E]\n}\n","import {TileType} from \"./TileType\";\nimport {Autowired} from \"./Autowired\";\nimport Vector2 = THREE.Vector2;\nimport {Player} from \"./Player\";\n\nexport class WorldBlock {\n    tileType: TileType;\n    tileMesh: THREE.Mesh;\n    backgroundMesh: THREE.Mesh;\n    owningPlayer: Player;\n\n    constructor() {\n\n    }\n\n    setOwningPlayer(newOwningPlayer: Player) {\n        this.owningPlayer = newOwningPlayer;\n        this.backgroundMesh.material = newOwningPlayer.material;\n    }\n}\n","import {TileType} from \"./TileType\";\nimport {WorldBlock} from \"./WorldBlock\";\nimport {Autowired} from \"./Autowired\";\nimport Vector2 = THREE.Vector2;\nimport {Player} from \"./Player\";\n\nexport class World {\n    autowired: Autowired;\n    map: {[key: number]: {[key: number]: WorldBlock;};} = {};\n\n    constructor(autowired: Autowired) {\n        this.autowired = autowired;\n\n        this.generatePlane();\n        this.generate(500, 7, 2, 0.5, 50, 0.25, 1.0, TileType.woods, [TileType.plains]);\n        this.generate(700, 3, 2, 1.0, 150, 0.25, 1.0, TileType.sea, [TileType.plains]);\n        this.generate(500, 3, 2, 0.0, 250, 0.0, 0.3, TileType.desert, [TileType.plains]);\n        this.generate(500, 4, 4, 0.0, 100, 0.0, 0.3, TileType.mountains, [TileType.woods]);\n\n        this.generate(500, 1, 1, 0.0, 40, 0.0, 0.0, TileType.gold, [TileType.plains, TileType.woods]);\n        this.generate(500, 1, 1, 0.0, 80, 0.0, 0.0, TileType.diamond, [TileType.plains, TileType.woods]);\n\n        let geometry = new THREE.PlaneGeometry(8, 8);\n        let backgroundGeometry = new THREE.PlaneGeometry(10, 10);\n\n        for (let i = 0; i < this.autowired.WIDTH; i++) {\n            for (let j = 0; j < this.autowired.HEIGHT; j++) {\n                let tileType = this.map[i][j].tileType;\n                let material = new THREE.MeshBasicMaterial({color: tileType.color, side: THREE.BackSide});\n                let plane = new THREE.Mesh(geometry, material);\n                plane.rotateX(Math.PI);\n                plane.position.set(i * 10, j * 10, 0);\n                this.autowired.scene.add(plane);\n                this.map[i][j].tileMesh = plane;\n\n                let backgroundMaterial = new THREE.MeshBasicMaterial({color: 0x000000, side: THREE.BackSide});\n                let backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n                backgroundPlane.rotateX(Math.PI);\n                backgroundPlane.position.set(i * 10, j * 10, -1);\n                this.autowired.scene.add(backgroundPlane);\n                this.map[i][j].backgroundMesh = backgroundPlane;\n            }\n        }\n    }\n    isWithinBounds(x: number, y: number) : boolean {\n        return x >= 0 && x < this.autowired.WIDTH && y >= 0 && y < this.autowired.HEIGHT;\n    }\n\n    setMap = (xUnrounded: number, yUnrounded: number, t: TileType, canApplyTo: TileType[]) => {\n        let x: number = Math.round(xUnrounded);\n        let y: number = Math.round(yUnrounded);\n        if (this.isWithinBounds(x, y)) {\n            let existingType: TileType = this.map[x][y].tileType;\n            let canBeApplied: boolean = _.contains(canApplyTo, existingType);\n            if (canBeApplied) {\n                this.map[x][y].tileType = t;\n            }\n        }\n    };\n\n    setMapOwner = (xUnrounded: number, yUnrounded: number, player: Player) => {\n        let x: number = Math.round(xUnrounded);\n        let y: number = Math.round(yUnrounded);\n        if (this.isWithinBounds(x, y)) {\n            let worldBlock: WorldBlock = this.map[x][y];\n\n        }\n    };\n\n    generatePlane = () => {\n        for (let i = 0; i < this.autowired.WIDTH; i++) {\n            this.map[i] = {};\n            for (let j = 0; j < this.autowired.HEIGHT; j++) {\n                this.map[i][j] = new WorldBlock();\n                this.map[i][j].tileType = TileType.plains;\n            }\n        }\n    };\n\n    randomSpot(): THREE.Vector2 {\n        return new THREE.Vector2(Math.round(Math.random() * this.autowired.WIDTH), Math.round(Math.random() * this.autowired.HEIGHT));\n    };\n\n    randomSpotAlongEdge(): THREE.Vector2 {\n        if (Math.random() < 0.5) {\n            let xEdge = Math.round(Math.random()) * this.autowired.WIDTH;\n            return new THREE.Vector2(xEdge, Math.round(Math.random() * this.autowired.HEIGHT));\n        } else {\n            let yEdge = Math.round(Math.random()) * this.autowired.HEIGHT;\n            return new THREE.Vector2(Math.round(Math.random() * this.autowired.WIDTH), yEdge);\n        }\n    };\n\n    randomDirection(scalar: number): THREE.Vector2 {\n        return new THREE.Vector2(Math.random() * 2 - 1, Math.random() * 2 - 1).multiplyScalar(scalar);\n    };\n\n    generate = (numberOfIterations: number,\n                radiusMax: number,\n                radiusMin: number,\n                directionScalar: number,\n                shuffleIterations: number,\n                edgeTendancy: number,\n                movementScalar: number,\n                t: TileType,\n                canApplyTo: TileType[]) => {\n\n        let position: THREE.Vector2 = this.randomSpotAlongEdge();\n        let radius: number;\n        let direction: THREE.Vector2 = this.randomDirection(directionScalar);\n\n        for (let zzz: number = 0; zzz < numberOfIterations; zzz++) {\n            if (zzz % shuffleIterations == 0) {\n                direction = this.randomDirection(directionScalar);\n                let diff = radiusMax - radiusMin;\n                radius = Math.random() * diff + radiusMin;\n                if (Math.random() < (1 - edgeTendancy)) {\n                    position = this.randomSpot();\n                } else {\n                    position = this.randomSpotAlongEdge();\n                }\n            }\n            position.x += (Math.random() * 5 - 2.5 + direction.x) * movementScalar;\n            position.y += (Math.random() * 5 - 2.5 + direction.y) * movementScalar;\n            if (position.y < 0 || position.y >= this.autowired.HEIGHT || position.x < 0 || position.x >= this.autowired.WIDTH) {\n                if (Math.random() < (1 - edgeTendancy)) {\n                    position = this.randomSpot();\n                } else {\n                    position = this.randomSpotAlongEdge();\n                }\n            }\n\n            for (let i: number = 0; i < radius * 2; i++) {\n                for (let j: number = 0; j < radius * 2; j++) {\n                    let iCentered = i - radius;\n                    let jCentered = j - radius;\n                    let point: Vector2 = new Vector2(iCentered + position.x, jCentered + position.y);\n                    if (new Vector2(iCentered, jCentered).length() < radius) {\n                        this.setMap(point.x, point.y, t, canApplyTo);\n                    }\n                }\n            }\n        }\n    };\n}\n","import Vector2 = THREE.Vector2;\nimport nextPowerOfTwo = THREE.Math.nextPowerOfTwo;\nimport {Autowired} from \"./Autowired\";\nimport {Player} from \"./Player\";\nimport {WorldBlock} from \"./WorldBlock\";\n\nexport class Simulator {\n    autowired: Autowired;\n\n    players: Player[] = [];\n    playerCharacter: Player;\n\n    constructor(autowired: Autowired) {\n        this.autowired = autowired;\n\n        for (let i: number = 0; i < 4; i++) {\n            let newPlayer: Player = new Player();\n            this.players.push(newPlayer);\n\n            let startingPosition: THREE.Vector2 = this.autowired.world.randomSpot();\n            this.autowired.world.map[startingPosition.x][startingPosition.y].setOwningPlayer(newPlayer);\n        }\n        this.playerCharacter = this.players[0];\n\n    }\n\n    neighborOffsets: THREE.Vector2[] = [new Vector2(1, 0), new Vector2(-1, 0), new Vector2(0, 1), new Vector2(0, -1)];\n\n    withNeighborOffsets(point: THREE.Vector2): THREE.Vector2[] {\n        let returnValue = [];\n        for (let neighborOffset of this.neighborOffsets) {\n            let neighborPoint = point.clone().add(neighborOffset);\n            if (this.autowired.world.isWithinBounds(neighborPoint.x, neighborPoint.y)) {\n                returnValue.push(neighborPoint)\n            }\n        }\n        return returnValue;\n    }\n\n    update(): void {\n        for (let i: number = 0; i < this.autowired.WIDTH; i++) {\n            for (let j: number = 0; j < this.autowired.HEIGHT; j++) {\n                let point: THREE.Vector2 = new THREE.Vector2(i, j);\n                let worldBlock: WorldBlock = this.autowired.world.map[i][j];\n                if (worldBlock.owningPlayer) {\n                    for (let neighbor of this.withNeighborOffsets(point)) {\n                        let neighborBlock = this.autowired.world.map[neighbor.x][neighbor.y];\n                        if (Math.random() < 0.1) {\n                            neighborBlock.setOwningPlayer(worldBlock.owningPlayer);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import {World} from \"./World\";\nimport {Simulator} from \"./Simulator\";\n\nimport ShadowMapType = THREE.ShadowMapType;\nimport PCFSoftShadowMap = THREE.PCFSoftShadowMap;\n\nexport class Autowired {\n    isGameOver: boolean;\n\n    camera: THREE.Camera;\n    scene: THREE.Scene;\n    renderer: THREE.WebGLRenderer;\n    glowScene: THREE.Scene;\n\n    canvasElement: JQuery;\n\n    world : World;\n    simulator: Simulator;\n    WIDTH: number = 100;\n    HEIGHT: number = 100;\n\n    constructor() {\n        this.isGameOver = false;\n        this.canvasElement = $(\"#myCanvas\");\n\n        let VIEW_ANGLE = 75;\n        let NEAR = 0.1;\n        let FAR = 1000;\n\n        this.renderer = new THREE.WebGLRenderer({\n            canvas: <HTMLCanvasElement>this.canvasElement.get(0),\n            antialias: true,\n            precision: \"highp\"\n        });\n        this.renderer.autoClear = false;\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = PCFSoftShadowMap;\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n        this.camera = new THREE.PerspectiveCamera(\n            VIEW_ANGLE,\n            window.innerWidth / window.innerHeight,\n            NEAR,\n            FAR);\n        this.camera.position.set(0, 0, 500);\n        this.camera.lookAt(new THREE.Vector3(0,0,0));\n        this.camera.position.set(500, 500, 700);\n\n        this.scene = new THREE.Scene();\n\n        let light = new THREE.PointLight(0xFFFFFF, 0.5, 10000);\n        light.position.set(0, 0, 0);\n        this.scene.add(light);\n\n        this.scene.add(new THREE.AmbientLight(0x404040));\n\n        this.world = new World(this);\n        this.simulator = new Simulator(this);\n    }\n}","import {Room} from \"./Room\";\nimport {Autowired} from \"./Autowired\";\nexport class Cube {\n    autowired: Autowired;\n    threeCube: THREE.Mesh;\n    physicsBody: CANNON.Body;\n\n    constructor(autowired: Autowired) {\n        this.autowired = autowired;\n\n        let width: number = (Math.random() * 0.3 + 0.2);\n        let height: number = (Math.random() * 0.3 + 0.2);\n        let depth: number = (Math.random() * 0.3 + 0.2);\n        this.threeCube = this.createCubeThree(width, height, depth);\n        this.physicsBody = this.createCubePhysics(width, height, depth);\n\n        this.autowired.scene.add(this.threeCube);\n        this.autowired.world.addBody(this.physicsBody);\n    }\n\n    createCubeThree(width: number, height: number, depth: number): THREE.Mesh {\n        let geometry = new THREE.BoxGeometry(width, height, depth);\n        let material = new THREE.MeshPhongMaterial({\n            color: 0x839CA5,\n            specular: 0xFFFFFF,\n            shininess: 200\n        });\n        let mesh: THREE.Mesh = new THREE.Mesh(geometry, material);\n        mesh.receiveShadow = true;\n        return mesh;\n    }\n\n    createCubePhysics(width: number, height: number, depth: number): CANNON.Body {\n        let x: number = (Math.random() - 0.5) * Room.blockSize;\n        let z: number = (Math.random() - 0.5) * Room.blockSize;\n        let density: number = 15.0;\n        let mass: number = width * height * depth * density;\n        let sphereBody = new CANNON.Body({\n            mass: mass,\n            position: new CANNON.Vec3(x, Room.blockSize / 2 - 1 - height, z),\n            shape: new CANNON.Box(new CANNON.Vec3(width / 2, height / 2, depth / 2)),\n            material: this.autowired.myMaterials.cubeMaterial,\n            linearDamping: 0.3,\n            angularDamping: 0.6\n        });\n        return sphereBody;\n    }\n\n    update(cubeOrder: CubeOrder, delta: number) {\n        let direction: CANNON.Vec3;\n        if (cubeOrder == CubeOrder.randomDirection) {\n            direction = new CANNON.Vec3(Math.random(), Math.random(), Math.random()).unit();\n        } else if (cubeOrder == CubeOrder.hitPlayer) {\n            direction = this.autowired.firstPersonControls.physics.position.clone().vsub(this.physicsBody.position).unit();\n        } else if (cubeOrder == CubeOrder.posX) {\n            direction = new CANNON.Vec3(1, 0, 0).unit();\n        } else if (cubeOrder == CubeOrder.negX) {\n            direction = new CANNON.Vec3(-1, 0, 0).unit();\n        } else if (cubeOrder == CubeOrder.posZ) {\n            direction = new CANNON.Vec3(0, 0, 1).unit();\n        } else if (cubeOrder == CubeOrder.negZ) {\n            direction = new CANNON.Vec3(0, 0, -1).unit();\n        }\n        this.physicsBody.applyImpulse(direction.scale(0.025 * delta), new CANNON.Vec3());\n        Util.copyPhysicsTo(this.physicsBody, this.threeCube);\n    }\n\n    destroy() {\n        this.autowired.scene.remove(this.threeCube);\n        this.autowired.world.remove(this.physicsBody);\n    }\n}","/// <reference path=\"definitions/three.d.ts\" />\nimport {Autowired} from \"./Autowired\";\n\nexport class Room {\n    static blockSize: number = 10;\n\n    autowired: Autowired;\n\n    bottomMesh: THREE.Mesh;\n    topMesh: THREE.Mesh;\n    leftMesh: THREE.Mesh;\n    rightMesh: THREE.Mesh;\n    forwardMesh: THREE.Mesh;\n    backwardMesh: THREE.Mesh;\n\n    bottomPhysics: CANNON.Body;\n    topPhysics: CANNON.Body;\n    leftPhysics: CANNON.Body;\n    rightPhysics: CANNON.Body;\n    forwardPhysics: CANNON.Body;\n    backwardPhysics: CANNON.Body;\n\n    constructor(autowired: Autowired) {\n        this.autowired = autowired;\n\n        this.bottomMesh = this.createCubeThreeFloor();\n        this.topMesh = this.createCubeThree();\n        this.leftMesh = this.createCubeThree();\n        this.rightMesh = this.createCubeThree();\n        this.forwardMesh = this.createCubeThree();\n        this.backwardMesh = this.createCubeThree();\n\n        this.bottomPhysics = this.createCubePhysics();\n        this.topPhysics = this.createCubePhysics();\n        this.leftPhysics = this.createCubePhysics();\n        this.rightPhysics = this.createCubePhysics();\n        this.forwardPhysics = this.createCubePhysics();\n        this.backwardPhysics = this.createCubePhysics();\n\n        this.bottomPhysics.position.set(0, -Room.blockSize, 0);\n        this.topPhysics.position.set(0, Room.blockSize, 0);\n        this.leftPhysics.position.set(Room.blockSize, 0, 0);\n        this.rightPhysics.position.set(-Room.blockSize, 0, 0);\n        this.forwardPhysics.position.set(0, 0, Room.blockSize);\n        this.backwardPhysics.position.set(0, 0, -Room.blockSize);\n\n        for (let mesh of this.meshes()) {\n            this.autowired.scene.add(mesh)\n        }\n        for (let physicBody of this.physics()) {\n            this.autowired.world.addBody(physicBody)\n        }\n    }\n\n    createCubeThree(width = Room.blockSize, height = Room.blockSize, depth = Room.blockSize) {\n        let geometry = new THREE.BoxGeometry(width, height, depth);\n        let material = new THREE.MeshStandardMaterial(\n            {\n                color: \"blue\"\n            }\n        );\n        let mesh: THREE.Mesh = new THREE.Mesh(geometry, material);\n        return mesh;\n    }\n\n    createCubeThreeFloor(width = Room.blockSize, height = Room.blockSize, depth = Room.blockSize) {\n        let geometry = new THREE.BoxGeometry(width, height, depth);\n        let material = new THREE.MeshBasicMaterial(\n            {\n                color: \"gray\"\n            }\n        );\n        let mesh: THREE.Mesh = new THREE.Mesh(geometry, material);\n        return mesh;\n    }\n\n    createCubePhysics(width = Room.blockSize, height = Room.blockSize, depth = Room.blockSize): CANNON.Body {\n        let sphereBody = new CANNON.Body({\n            mass: 0,\n            shape: new CANNON.Box(new CANNON.Vec3(width / 2, height / 2, depth / 2)),\n            material: this.autowired.myMaterials.slipperyMaterial\n        });\n        return sphereBody;\n    }\n\n    update() {\n        Util.copyPhysicsTo(this.bottomPhysics, this.bottomMesh);\n        Util.copyPhysicsTo(this.topPhysics, this.topMesh);\n        Util.copyPhysicsTo(this.leftPhysics, this.leftMesh);\n        Util.copyPhysicsTo(this.rightPhysics, this.rightMesh);\n        Util.copyPhysicsTo(this.forwardPhysics, this.forwardMesh);\n        Util.copyPhysicsTo(this.backwardPhysics, this.backwardMesh);\n    }\n\n    meshes(): THREE.Mesh[] {\n        return [this.bottomMesh, this.topMesh, this.leftMesh, this.rightMesh, this.forwardMesh, this.backwardMesh];\n    }\n\n    physics(): CANNON.Body[] {\n        return [this.bottomPhysics, this.topPhysics, this.leftPhysics, this.rightPhysics, this.forwardPhysics, this.backwardPhysics];\n    }\n}","/// <reference path=\"Cube.ts\" />\n/// <reference path=\"Room.ts\" />\n/// <reference path=\"definitions/underscore.d.ts\" />\n\nimport {Autowired} from \"./Autowired\";\n\n\nclass Main {\n    autowired: Autowired;\n\n    constructor() {\n        this.autowired = new Autowired();\n    }\n\n\n\n    render = () => {\n        requestAnimationFrame(this.render);\n        this.autowired.simulator.update();\n        this.autowired.renderer.clear();\n        this.autowired.renderer.render(this.autowired.scene, this.autowired.camera);\n    };\n}\nlet main: Main = new Main();\nmain.render();"]}